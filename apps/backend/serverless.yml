# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: jianhong
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: rostering-app
# "service" is the name of this project. This will also be added to your AWS resource names.
service: rostering-app

plugins:
  - serverless-dotenv-plugin

# useDotenv: true

provider:
  name: aws
  runtime: nodejs20.x
  region: ap-southeast-1
  memorySize: 512
  timeout: 30
  architecture: arm64
  vpc:
    securityGroupIds:
      - sg-0f00203f157badb15
      - sg-08888aa92480950a0
      - sg-0fb392186f65514c1
    subnetIds:
      - subnet-03fa782274ab82e9a
      - subnet-09968ba577be9aa97
      - subnet-09a57e12b5c23444c
  ecr:
    images:
      backend-image:
        uri: 383373959609.dkr.ecr.ap-southeast-1.amazonaws.com/serverless-rostering-app-dev:latest
      db-migration-image:
        uri: 383373959609.dkr.ecr.ap-southeast-1.amazonaws.com/rostering-app-dev-migration:latest
      delay-job-image:
        uri: 383373959609.dkr.ecr.ap-southeast-1.amazonaws.com/rostering-app-dev-delay-job:latest

stages:
  default:
    observability: false

functions:
  api:
    image: backend-image
    events:
      - httpApi: '*'
    environment:
      VERSION: ${env:VERSION}
      NODE_ENV: ${env:NODE_ENV}
      BUILD_MODE: ${env:BUILD_MODE}
      JWT_SECRET: ${env:JWT_SECRET}
      JWT_EXPIRE: ${env:JWT_EXPIRE}
      PASSWORD_HASH_SECRET: ${env:PASSWORD_HASH_SECRET}
      SQS_NAME_EMAIL: ${env:SQS_NAME_EMAIL}
      SQS_AWS_REGION: ${env:SQS_AWS_REGION}
      SQS_AWS_ACCESS_KEY_ID: ${env:SQS_AWS_ACCESS_KEY_ID}
      SQS_AWS_SECRET_ACCESS_KEY: ${env:SQS_AWS_SECRET_ACCESS_KEY}
      AWS_SQS_URL: ${env:AWS_SQS_URL}
      DATABASE_HOST: ${env:DATABASE_HOST}
      DATABASE_PORT: ${env:DATABASE_PORT}
      DATABASE_USER: ${env:DATABASE_USER}
      DATABASE_PASSWORD: ${env:DATABASE_PASSWORD}
      DATABASE_DB: ${env:DATABASE_DB}
  db-migration:
    image: db-migration-image
    events:
      - eventBridge:
          pattern:
            source:
              - aws.lambda
            detail-type:
              - AWS API Call via CloudTrail
            detail:
              eventSource:
                - lambda.amazonaws.com
              eventName:
                - anything-but:
                    - UpdateFunctionCode
              requestParameters:
                functionName:
                  - rostering-app-dev-db-migration
    environment:
      VERSION: ${env:VERSION}
      NODE_ENV: ${env:NODE_ENV}
      DATABASE_HOST: ${env:DATABASE_HOST}
      DATABASE_PORT: ${env:DATABASE_PORT}
      DATABASE_USER: ${env:DATABASE_USER}
      DATABASE_PASSWORD: ${env:DATABASE_PASSWORD}
      DATABASE_DB: ${env:DATABASE_DB}
  delay-job:
    image: delay-job-image
    events:
      - sqs:
          arn: ${env:SERVERLESS_SQS_ARN}
      - eventBridge:
          pattern:
            source:
              - aws.lambda
            detail-type:
              - AWS API Call via CloudTrail
            detail:
              eventSource:
                - lambda.amazonaws.com
              eventName:
                - anything-but:
                    - UpdateFunctionCode
              requestParameters:
                functionName:
                  - rostering-app-dev-delay-job
    environment:
      VERSION: ${env:VERSION}
      NODE_ENV: ${env:NODE_ENV}
      BUILD_MODE: ${env:BUILD_MODE}
      JWT_SECRET: ${env:JWT_SECRET}
      JWT_EXPIRE: ${env:JWT_EXPIRE}
      PASSWORD_HASH_SECRET: ${env:PASSWORD_HASH_SECRET}
      SQS_NAME_EMAIL: ${env:SQS_NAME_EMAIL}
      SQS_AWS_REGION: ${env:SQS_AWS_REGION}
      SQS_AWS_ACCESS_KEY_ID: ${env:SQS_AWS_ACCESS_KEY_ID}
      SQS_AWS_SECRET_ACCESS_KEY: ${env:SQS_AWS_SECRET_ACCESS_KEY}
      AWS_SQS_URL: ${env:AWS_SQS_URL}
      DATABASE_HOST: ${env:DATABASE_HOST}
      DATABASE_PORT: ${env:DATABASE_PORT}
      DATABASE_USER: ${env:DATABASE_USER}
      DATABASE_PASSWORD: ${env:DATABASE_PASSWORD}
      DATABASE_DB: ${env:DATABASE_DB}
