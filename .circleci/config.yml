version: 2.1

orbs:
  node: circleci/node@6.1.0
  aws-ecr: circleci/aws-ecr@9.3
  aws-cli: circleci/aws-cli@5.1
  aws-s3: circleci/aws-s3@4.0
  aws-sg-white-list-circleci-ip: inokappa/aws-sg-white-list-circleci-ip@0.0.3

commands:
  generate-backend-env:
    description: 'Generate .env File'
    parameters:
      stage:
        type: string
        default: 'DEV'
      env_type:
        type: string
        default: 'dev'
    steps:
      - run:
          name: remove .env file
          command: |
            cd apps/backend
            rm -rf .env
      - run:
          name: generate env variables
          command: |
            cd apps/backend
            echo "NODE_ENV=\"${<< parameters.env_type >>}\"" >> .env
            echo "VERSION=${<< parameters.stage >>_VERSION}" >> .env
            echo "BUILD_MODE=\"swc\"" >> .env
            echo "VERSION=${<< parameters.stage >>_VERSION}" >> .env
            echo "DATABASE_HOST=\"${<< parameters.stage >>_DATABASE_HOST}\"" >> .env
            echo "DATABASE_PORT=\"${<< parameters.stage >>_DATABASE_PORT}\"" >> .env
            echo "DATABASE_USER=\"${<< parameters.stage >>_DATABASE_USER}\"" >> .env
            echo "DATABASE_PASSWORD=\"${<< parameters.stage >>_DATABASE_PASSWORD}\"" >> .env
            echo "DATABASE_DB=\"${<< parameters.stage >>_DATABASE_DB}\"" >> .env

  build-and-push-to-ecr:
    description: 'Build image and push to ECR'
    parameters:
      repo:
        type: string
      stage:
        type: string
        default: 'DEV'
      env_type:
        type: string
        default: 'dev'
    steps:
      - generate-backend-env:
          stage: << parameters.stage >>
          env_type: << parameters.env_type >>
      - aws-cli/setup:
          profile_name: default
      - aws-ecr/build_and_push_image:
          auth:
            - aws-cli/setup:
                profile_name: default
          repo: << parameters.repo >>
          tag: latest
          build_path: ~/project/apps/backend
          path: ~/project/apps/backend
          dockerfile: Dockerfile
          extra_build_args: --provenance=false

  deploy-frontend:
    parameters:
      s3_bucket:
        type: string
        description: 'S3 bucket name for web hosting'
      backend_url:
        type: string
        description: 'Backend URL'
    steps:
      - checkout
      - attach_workspace:
          at: ./apps/frontend
      - node/install-packages
      - run:
          name: Prepare .env File
          command: |
            echo VITE_BACKEND_URL=\"<< parameters.backend_url >>\" >>> .env
      - run:
          name: Print Generated .env File
          command: cat .env
      - run:
          name: Build
          command: npm run build
      - aws-cli/install
      - aws-cli/setup:
          profile_name: default
      - aws-s3/sync:
          from: ./dist
          to: 's3://<< parameters.s3_bucket >>/'

jobs:
  dev-build-image:
    docker:
      - image: 'cimg/node:20.17.0'
    resource_class: large
    steps:
      - run: sh -c env
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - build-and-push-to-ecr:
          repo: serverless-rostering-app-dev
          stage: DEV
          env_type: dev

  dev-deploy-backend:
    docker:
      - image: cimg/node:20.17.0
    resource_class: medium
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - node/install-packages
      - run:
          name: Install Serverless
          command: |
            npm install --prefix=$HOME/.local --global serverless@4.2.4
            sls -v
      - run:
          name: Install Backend Dependencies
          command: |
            cd apps/backend
            npm ci
      - generate-backend-env:
          stage: 'DEV'
          env_type: dev
      - run:
          name: Serverless Version
          command: |
            cd apps/backend
            sls -v
      - run:
          name: Deploy Dev
          command: |
            cd apps/backend
            sls deploy --stage dev --verbose

  dev-deploy-frontend:
    docker:
      - image: cimg/node:20.17.0
    resource_class: medium
    steps:
      - deploy-frontend:
          s3_bucket: 'rostering-web'
          backend_url: 'https://dev.api.rostering.jianhong.link'

workflows:
  deployment:
    jobs:
      - dev-build-image:
          context:
            - common-database-secret
            - aws-role-secret
          filters:
            branches:
              only:
                - master
                - cicd-setup
      - dev-deploy-backend:
          context:
            - serverless-deploy-secret
            - common-database-secret
          filters:
            branches:
              only:
                - master
                - cicd-setup
          requires:
            - dev-build-image
      - dev-deploy-frontend:
          context:
            - aws-role-secret
          filters:
            branches:
              only:
                - master
                - cicd-setup
