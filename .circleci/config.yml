version: 2.1

orbs:
  node: circleci/node@6.1.0
  aws-ecr: circleci/aws-ecr@9.3
  aws-cli: circleci/aws-cli@5.1
  aws-s3: circleci/aws-s3@4.0

commands:
  generate-backend-env:
    description: 'Generate .env File'
    parameters:
      stage:
        type: string
      env_type:
        type: string
    steps:
      - run:
          name: Remove .env file
          command: |
            cd apps/backend
            rm -rf .env
      - run:
          name: Generate env variables
          command: |
            cd apps/backend
            echo "NODE_ENV=\"<< parameters.env_type >>\"" >> .env
            echo "BUILD_MODE=\"swc\"" >> .env
            echo "CLIENT_HOST=\"${<< parameters.stage >>_CLIENT_HOST}\"" >> .env
            echo "SERVER_HOST=\"${<< parameters.stage >>_SERVER_HOST}\"" >> .env
            echo "VERSION=${<< parameters.stage >>_VERSION}" >> .env
            echo "DATABASE_HOST=\"${<< parameters.stage >>_DATABASE_HOST}\"" >> .env
            echo "DATABASE_PORT=\"${<< parameters.stage >>_DATABASE_PORT}\"" >> .env
            echo "DATABASE_USER=\"${<< parameters.stage >>_DATABASE_USER}\"" >> .env
            echo "DATABASE_PASSWORD=\"${<< parameters.stage >>_DATABASE_PASSWORD}\"" >> .env
            echo "DATABASE_DB=\"${<< parameters.stage >>_DATABASE_DB}\"" >> .env
            echo "JWT_EXPIRE=\"${<< parameters.stage >>_JWT_EXPIRE}\"" >> .env
            echo "JWT_SECRET=\"${<< parameters.stage >>_JWT_SECRET}\"" >> .env
            echo "PASSWORD_HASH_SECRET=\"${<< parameters.stage >>_PASSWORD_HASH_SECRET}\"" >> .env
            echo "EMAIL_SENDER=\"${<< parameters.stage >>_EMAIL_SENDER}\"" >> .env
            echo "EMAIL_REPLY_TO=\"${<< parameters.stage >>_EMAIL_REPLY_TO}\"" >> .env
            echo "SQS_NAME_EMAIL=\"${<< parameters.stage >>_SQS_NAME_EMAIL}\"" >> .env
            echo "SERVERLESS_SQS_ARN=\"${<< parameters.stage >>_SERVERLESS_SQS_ARN}\"" >> .env
            echo "SQS_AWS_REGION=\"${<< parameters.stage >>_SQS_AWS_REGION}\"" >> .env
            echo "SES_AWS_REGION=\"${<< parameters.stage >>_SES_AWS_REGION}\"" >> .env
            echo "AWS_SQS_URL=\"${<< parameters.stage >>_AWS_SQS_URL}\"" >> .env
            echo "SQS_AWS_ACCESS_KEY_ID=\"${<< parameters.stage >>_SQS_AWS_ACCESS_KEY_ID}\"" >> .env
            echo "SQS_AWS_SECRET_ACCESS_KEY=\"${<< parameters.stage >>_SQS_AWS_SECRET_ACCESS_KEY}\"" >> .env
            echo "ENABLE_POSTMARK_EMAIL_SERVICE=\"${<< parameters.stage >>_ENABLE_POSTMARK_EMAIL_SERVICE}\"" >> .env
      - run:
          name: Print generated .env file
          command: |
            cd apps/backend
            cat .env

  backend-app-build-and-push-to-ecr:
    description: 'Build backend app and DB migration images then push to ECR'
    parameters:
      app_repo:
        type: string
      stage:
        type: string
        default: 'DEV'
      env_type:
        type: string
    steps:
      # - generate-backend-env:
      #     stage: << parameters.stage >>
      #     env_type: << parameters.env_type >>
      - aws-ecr/build_and_push_image:
          auth:
            - aws-cli/setup:
                profile_name: default
          repo: << parameters.app_repo >>
          tag: latest
          build_path: ~/project/apps/backend
          path: ~/project/apps/backend
          dockerfile: Dockerfile
          extra_build_args: --provenance=false

  db-migration-build-and-push-to-ecr:
    description: 'Build backend app and DB migration images then push to ECR'
    parameters:
      db_migration_repo:
        type: string
      stage:
        type: string
        default: 'DEV'
      env_type:
        type: string
    steps:
      # - generate-backend-env:
      #     stage: << parameters.stage >>
      #     env_type: << parameters.env_type >>
      - aws-ecr/build_and_push_image:
          auth:
            - aws-cli/setup:
                profile_name: default
          repo: << parameters.db_migration_repo >>
          tag: latest
          build_path: ~/project/apps/backend
          path: ~/project/apps/backend
          dockerfile: Dockerfile.migration
          extra_build_args: --provenance=false

  delay-job-build-and-push-to-ecr:
    description: 'Build Delay Job images then push to ECR'
    parameters:
      delay_job_repo:
        type: string
      stage:
        type: string
        default: 'DEV'
      env_type:
        type: string
    steps:
      # - generate-backend-env:
      #     stage: << parameters.stage >>
      #     env_type: << parameters.env_type >>
      - aws-ecr/build_and_push_image:
          auth:
            - aws-cli/setup:
                profile_name: default
          repo: << parameters.delay_job_repo >>
          tag: latest
          build_path: ~/project/apps/backend
          path: ~/project/apps/backend
          dockerfile: Dockerfile.delay-job
          extra_build_args: --provenance=false

  deploy-frontend:
    parameters:
      s3_bucket:
        type: string
        description: 'S3 bucket name for web hosting'
      backend_url:
        type: string
        description: 'Backend URL'
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: |
            cd apps/frontend
            npm ci
      - run:
          name: Prepare .env File
          command: |
            cd apps/frontend
            echo VITE_BACKEND_URL=\"<< parameters.backend_url >>\" >> .env
      - run:
          name: Print Generated .env File
          command: |
            cd apps/frontend
            cat .env
      - run:
          name: Build
          command: |
            cd apps/frontend
            npm run build
      - aws-cli/install
      - aws-cli/setup:
          aws_access_key_id: AWS_ACCESS_KEY
          aws_secret_access_key: AWS_SECRET_ACCESS_KEY
          region: AWS_DEFAULT_REGION
      - aws-s3/sync:
          arguments: '--delete'
          from: ./apps/frontend/dist
          to: 's3://<< parameters.s3_bucket >>/'

jobs:
  dev-backend-build-image:
    docker:
      - image: 'cimg/node:20.17.0'
    resource_class: large
    steps:
      - run: sh -c env
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - backend-app-build-and-push-to-ecr:
          app_repo: serverless-rostering-app-dev
          stage: 'DEV'
          env_type: 'awsDev'

  dev-db-migration-build-image:
    docker:
      - image: 'cimg/node:20.17.0'
    resource_class: large
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - db-migration-build-and-push-to-ecr:
          db_migration_repo: rostering-app-dev-migration
          stage: 'DEV'
          env_type: 'awsDev'

  dev-delay-job-build-image:
    docker:
      - image: 'cimg/node:20.17.0'
    resource_class: large
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - delay-job-build-and-push-to-ecr:
          delay_job_repo: rostering-app-dev-delay-job
          stage: 'DEV'
          env_type: 'awsDev'

  dev-deploy-backend:
    docker:
      - image: cimg/node:20.17.0
    resource_class: medium
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - node/install-packages
      - run:
          name: Install Serverless
          command: |
            npm install --prefix=$HOME/.local --global serverless@4.2.4 serverless-dotenv-plugin
            sls -v
      - run:
          name: Install Backend Dependencies
          command: |
            cd apps/backend
            npm ci
      - generate-backend-env:
          stage: 'DEV'
          env_type: 'awsdev'
      - run:
          name: Serverless Version
          command: |
            cd apps/backend
            sls -v
      - run:
          name: Deploy Dev
          command: |
            cd apps/backend
            sls deploy --stage dev --verbose

  dev-deploy-frontend:
    docker:
      - image: cimg/node:20.17.0
    resource_class: medium
    steps:
      - deploy-frontend:
          s3_bucket: 'rostering-web'
          backend_url: 'https://dev.api.rostering.jianhong.link'

workflows:
  deployment:
    jobs:
      - approve-dev-backend-deploy:
          type: approval
          # filters:
          #   branches:
          #     only:
          #       - master
      - approve-dev-frontend-deploy:
          type: approval
          # filters:
          #   branches:
          #     only:
          #       - master
      - dev-backend-build-image:
          context:
            - common-database-secret
            - aws-role-secret
          requires:
            - approve-dev-backend-deploy
          # filters:
          #   branches:
          #     only:
          #       - master
      - dev-db-migration-build-image:
          context:
            - common-database-secret
            - aws-role-secret
          requires:
            - approve-dev-backend-deploy
          # filters:
          #   branches:
          #     only:
          #       - master
      - dev-delay-job-build-image:
          context:
            - common-database-secret
            - aws-role-secret
          requires:
            - approve-dev-backend-deploy
          # filters:
          #   branches:
          #     only:
          #       - master
      - dev-deploy-backend:
          context:
            - serverless-deploy-secret
            - common-database-secret
            - rostering-dev-aws-secret
          # filters:
          #   branches:
          #     only:
          #       - master
          requires:
            - dev-backend-build-image
            - dev-db-migration-build-image
            - dev-delay-job-build-image
      - dev-deploy-frontend:
          context:
            - aws-role-secret
          requires:
            - approve-dev-frontend-deploy
          # filters:
          #   branches:
          #     only:
          #       - master
